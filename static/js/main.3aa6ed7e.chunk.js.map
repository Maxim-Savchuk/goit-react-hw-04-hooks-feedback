{"version":3,"sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.styled.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","components/App/App.jsx","index.js"],"names":["Container","styled","div","Title","h1","Section","title","children","Button","button","FeedbackOptions","options","onLeaveFeedback","map","option","index","type","name","onClick","Text","p","Notification","message","h2","Statistics","good","neutral","bad","total","positivePercentage","feedbackOptions","App","useState","setGood","setNeutral","setBad","countTotalFeedback","event","target","prevState","toFixed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAEaA,EAAYC,IAAOC,IAAV,mGAOTC,EAAQF,IAAOG,GAAV,gD,OCNLC,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAC7B,OACI,eAACP,EAAD,WACI,cAACG,EAAD,UAAQG,IACPC,MCLAP,EAAYC,IAAOC,IAAV,yFAMTM,EAASP,IAAOQ,OAAV,saCLNC,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBACvC,OACI,cAAC,EAAD,UACKD,EAAQE,KAAI,SAACC,EAAQC,GAClB,OACI,cAACP,EAAD,CACIQ,KAAK,SAELC,KAAMH,EACNI,QAASN,EAJb,SAMKE,GAJIC,SCRhBI,EAAOlB,IAAOmB,EAAV,qECCJC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OAAO,cAACH,EAAD,UAAOG,KCFLtB,EAAYC,IAAOC,IAAV,iDAITC,EAAQF,IAAOsB,GAAV,wEAKLJ,EAAOlB,IAAOmB,EAAV,wGCPJI,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBACpD,OACI,eAAC,EAAD,WACI,cAAC,EAAD,yBACCD,EAEO,gCACI,eAAC,EAAD,oBAAY,+BAAOH,OACnB,eAAC,EAAD,uBAAe,+BAAOC,OACtB,eAAC,EAAD,mBAAW,+BAAOC,OAClB,eAAC,EAAD,qBAAa,+BAAOC,OACpB,eAAC,EAAD,iCAAyB,+BAAOC,UAGpC,cAAC,EAAD,CAAcP,QAAQ,0BCbpCQ,EAAkB,CAAC,OAAQ,UAAW,OAE/BC,EAAM,WACjB,MAAwBC,mBAAS,GAAjC,mBAAOP,EAAP,KAAaQ,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAON,EAAP,KAAgBQ,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOL,EAAP,KAAYQ,EAAZ,KAoBMC,EAAqB,WACzB,OAAOX,EAAOC,EAAUC,GAO1B,OACE,eAAC,EAAD,CAASrB,MAAM,wBAAf,UACE,cAAC,EAAD,CACEK,QAASmB,EACTlB,gBA9BiB,SAAAyB,GAGrB,OAFcA,EAAMC,OAAOrB,MAGzB,IAAK,OACHgB,GAAQ,SAAAM,GAAS,OAAIA,EAAY,KACjC,MACF,IAAK,UACHL,GAAW,SAAAK,GAAS,OAAIA,EAAY,KACpC,MACF,IAAK,MACHJ,GAAO,SAAAI,GAAS,OAAIA,EAAY,KAChC,MACF,QACE,WAkBF,cAAC,EAAD,CACEd,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOQ,IACPP,mBAdE,GAAN,QAAYJ,EAAOW,IAAwB,KAAKI,QAAQ,GAAxD,WC9BJC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3aa6ed7e.chunk.js","sourcesContent":["import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n  padding: 20px;\n  width: 800px;\n  height: auto;\n  margin: 0 auto;\n`;\n\nexport const Title = styled.h1`\n  font-size: 28px;\n`;\n","import PropTypes from 'prop-types';\nimport { Container, Title } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n    return (\n        <Container>\n            <Title>{title}</Title>\n            {children}\n        </Container>\n    );\n};\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node,\n}","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n  margin-top: 40px;\n  margin-left: 20px;\n  display: flex;\n`;\n\nexport const Button = styled.button`\n  background-color: transparent;\n  border-radius: 4px;\n  border: none;\n  font-size: 18px;\n  padding: 5px 10px;\n  cursor: pointer;\n  text-transform: capitalize;\n  font-weight: 600;\n  box-shadow: 0px 1px 4px rgba(0, 0, 0, 0.12), 0px 4px 4px rgba(0, 0, 0, 0.06),\n    1px 4px 4px rgba(0, 0, 0, 0.16), 0px 1px 1px rgba(0, 0, 0, 0.12);\n  &:not(:last-child) {\n    margin-right: 15px;\n  }\n`;","import PropTypes from 'prop-types';\nimport { Container, Button } from './FeedbackOptions.styled';\n\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => {\n    return (\n        <Container>\n            {options.map((option, index) => {\n                return (\n                    <Button\n                        type=\"button\"\n                        key={index}\n                        name={option}\n                        onClick={onLeaveFeedback}\n                    >\n                        {option}\n                    </Button>\n                )\n            })}\n        </Container>\n    );\n};\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.array.isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired,\n}","import styled from \"@emotion/styled\";\n\nexport const Text = styled.p`\n  font-weight: 600;\n  font-size: 24px;\n`;","import PropTypes from 'prop-types';\nimport { Text } from './Notification.styled';\n\nexport const Notification = ({ message }) => {\n    return <Text>{message}</Text>\n}\n\nNotification.propTypes = {\n    message: PropTypes.string.isRequired,\n}","import styled from \"@emotion/styled\";\n\nexport const Container = styled.div`\n  margin-top: 30px;\n`;\n\nexport const Title = styled.h2`\n  font-size: 28px;\n  margin-bottom: 30px;\n`;\n\nexport const Text = styled.p`\n  font-weight: 500;\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Notification } from 'components/Notification';\nimport { Container, Title, Text } from './Statistics.styled';\n\nexport const Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n    return (\n        <Container>\n            <Title>Statistics</Title>\n            {total ?\n                (\n                    <div>\n                        <Text>Good: <span>{good}</span></Text>\n                        <Text>Neutral: <span>{neutral}</span></Text>\n                        <Text>Bad: <span>{bad}</span></Text>\n                        <Text>Total: <span>{total}</span></Text>\n                        <Text>Positive feedback: <span>{positivePercentage}</span></Text>\n                    </div>\n                ) : (\n                    <Notification message=\"No feedback given\" />\n                )\n            }\n        </Container>\n    )\n}\n\nStatistics.propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.string,\n}","import { useState } from 'react';\nimport { Section } from 'components/Section';\nimport { FeedbackOptions } from 'components/FeedbackOptions';\nimport { Statistics } from 'components/Statistics';\n\nconst feedbackOptions = [\"good\", \"neutral\", \"bad\"];\n\nexport const App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleFeedback = event => {\n    const value = event.target.name;\n\n    switch (value) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  }\n\n  const countPositiveFeedbackPercentage = () => {\n    return `${((good / countTotalFeedback()) * 100).toFixed(0)}%`;\n  };\n\n  return (\n    <Section title=\"Please leave feedback\">\n      <FeedbackOptions\n        options={feedbackOptions}\n        onLeaveFeedback={handleFeedback}\n      />\n      <Statistics\n        good={good}\n        neutral={neutral}\n        bad={bad}\n        total={countTotalFeedback()}\n        positivePercentage={countPositiveFeedbackPercentage()}\n      />\n    </Section>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'index.css';\nimport { App } from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}